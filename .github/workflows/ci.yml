# .github/workflows/ci.yml
# Comprehensive CI/CD pipeline for docker-net-doctor

name: CI/CD Pipeline

# Trigger conditions - understanding when to run CI is important
on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]  # Trigger on version tags for releases
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily to catch issues with dependencies
    - cron: '0 0 * * *'

# Environment variables available to all jobs
env:
  GO_VERSION: '1.21'
  GOLANGCI_LINT_VERSION: 'v1.54'

jobs:
  # First job: Run tests on multiple OS and Go versions
  test:
    name: Test on ${{ matrix.os }} with Go ${{ matrix.go }}
    runs-on: ${{ matrix.os }}
    
    # Test matrix ensures compatibility across environments
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.20', '1.21']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full history for version tags
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          cache: true  # Cache Go modules for faster builds
      
      - name: Install dependencies
        run: go mod download
      
      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
      
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.go == '1.21'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella

  # Second job: Code quality checks
  lint:
    name: Lint and Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: --timeout=5m
      
      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: ./...
      
      - name: Check for vulnerabilities
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  # Third job: Integration tests with real Docker
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, lint]  # Only run if basic tests pass
    
    services:
      # Set up Docker-in-Docker for testing
      docker:
        image: docker:dind
        options: --privileged
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Setup test environment
        run: |
          # Create test networks and containers
          docker network create test-net-1
          docker network create test-net-2
          docker run -d --name test-container-1 --network test-net-1 nginx:alpine
          docker run -d --name test-container-2 --network test-net-2 busybox sleep 3600
      
      - name: Build binary
        run: make build
      
      - name: Run integration tests
        run: |
          # Test the actual binary against real Docker
          ./bin/docker-net-doctor diagnose --json > results.json
          
          # Verify output structure
          jq '.Summary.TotalChecks' results.json
          
          # Test specific checks
          ./bin/docker-net-doctor check dns test-container-1
          ./bin/docker-net-doctor check connectivity test-container-1 test-container-2
      
      - name: Cleanup
        if: always()
        run: |
          docker stop test-container-1 test-container-2 || true
          docker rm test-container-1 test-container-2 || true
          docker network rm test-net-1 test-net-2 || true

  # Fourth job: Build release artifacts
  build:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [test, lint, integration]
    if: startsWith(github.ref, 'refs/tags/v')  # Only on version tags
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Build for all platforms
        run: make build-all
      
      - name: Create checksums
        run: |
          cd bin
          sha256sum docker-net-doctor-* > checksums.txt
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: bin/
          retention-days: 5

  # Fifth job: Create GitHub release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: binaries
          path: bin/
      
      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Generate release notes
        id: release_notes
        run: |
          # Extract changes from CHANGELOG.md or generate from commits
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD > release_notes.md
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Docker Network Doctor ${{ steps.version.outputs.VERSION }}
          body_path: release_notes.md
          files: |
            bin/docker-net-doctor-*
            bin/checksums.txt
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, 'rc') }}

  # Sixth job: Build and push Docker image
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/docker-net-doctor:latest
            ${{ secrets.DOCKER_USERNAME }}/docker-net-doctor:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Seventh job: Update documentation
  docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Generate command documentation
        run: |
          go run cmd/docker-net-doctor/main.go --help > docs/commands.md
          go run cmd/docker-net-doctor/main.go diagnose --help >> docs/commands.md
          go run cmd/docker-net-doctor/main.go check --help >> docs/commands.md
      
      - name: Update README with version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          sed -i "s/version: .*/version: $VERSION/" README.md
      
      - name: Commit documentation updates
        uses: EndBug/add-and-commit@v9
        with:
          add: 'docs README.md'
          message: 'docs: update for version ${{ github.ref_name }}'
          default_author: github_actions
