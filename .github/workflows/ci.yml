# Optimized CI/CD Pipeline for Docker Network Doctor
# Target: <10 minute total execution time with parallel job execution

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip time-intensive tests'
        type: boolean
        default: false
      run_security:
        description: 'Run security scans'
        type: boolean
        default: true

# Global environment variables
env:
  GO_VERSION: '1.23'
  GOLANGCI_LINT_VERSION: 'v1.54'
  DOCKER_BUILDKIT: 1
  BUILDX_NO_DEFAULT_ATTESTATIONS: 1

# Global permissions for security
permissions:
  contents: read
  security-events: write
  actions: read
  packages: write
  pull-requests: write

# Optimizations applied:
# 1. Parallel job execution with smart dependencies
# 2. Aggressive caching for Go modules, builds, and Docker layers
# 3. Matrix builds with fail-fast disabled for comprehensive testing
# 4. Early validation job to catch basic issues quickly
# 5. Conditional job execution based on changes and PR type

jobs:
  # Job 1: Quick validation - fastest feedback (30-60 seconds)
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      go-files-changed: ${{ steps.changes.outputs.go-files }}
      docs-only: ${{ steps.changes.outputs.docs-only }}
      go-mod-hash: ${{ steps.cache-key.outputs.go-mod-hash }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Minimal depth for change detection

      - name: Detect changes
        id: changes
        run: |
          # Check what types of files changed
          if git diff --name-only HEAD~1 | grep -E '\.(go|mod|sum)$'; then
            echo "go-files=true" >> $GITHUB_OUTPUT
          else
            echo "go-files=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if only docs changed
          if git diff --name-only HEAD~1 | grep -v -E '\.(md|txt|yml|yaml|json)$' | grep -q .; then
            echo "docs-only=false" >> $GITHUB_OUTPUT
          else
            echo "docs-only=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate cache key
        id: cache-key
        run: |
          # Generate hash for Go modules
          if [ -f go.sum ]; then
            echo "go-mod-hash=$(sha256sum go.sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          else
            echo "go-mod-hash=no-gosum" >> $GITHUB_OUTPUT
          fi

      - name: Validate go.mod
        if: steps.changes.outputs.go-files == 'true'
        run: |
          if [ -f go.mod ]; then
            grep -q "github.com/docker/distribution v2.7.1+incompatible" go.mod || {
              echo "❌ Critical: Missing docker/distribution v2.7.1+incompatible replacement"
              exit 1
            }
            echo "✅ go.mod validation passed"
          fi

  # Job 2: Build matrix - parallel builds for all platforms (3-4 minutes)
  build-matrix:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ubuntu-latest
    needs: quick-validation
    if: needs.quick-validation.outputs.docs-only != 'true'
    timeout-minutes: 5
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            go.sum
            go.mod

      - name: Cache Go build cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/go-build
          key: go-build-${{ runner.os }}-${{ matrix.os }}-${{ matrix.arch }}-${{ hashFiles('**/*.go') }}
          restore-keys: |
            go-build-${{ runner.os }}-${{ matrix.os }}-${{ matrix.arch }}-
            go-build-${{ runner.os }}-

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          # Build with version info
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev-${GITHUB_SHA::8}")
          BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
          GIT_COMMIT=$(git rev-parse --short HEAD)
          
          LDFLAGS="-X main.Version=${VERSION} -X main.BuildTime=${BUILD_TIME} -X main.GitCommit=${GIT_COMMIT}"
          
          mkdir -p bin
          go build -ldflags "${LDFLAGS}" -o bin/docker-net-doctor-${{ matrix.os }}-${{ matrix.arch }} \
            cmd/docker-net-doctor/main.go
          
          # Test that binary was created and has correct version
          file bin/docker-net-doctor-${{ matrix.os }}-${{ matrix.arch }}
          ls -la bin/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/docker-net-doctor-${{ matrix.os }}-${{ matrix.arch }}
          retention-days: 1
          compression-level: 9

  # Job 3: Unit tests with coverage - parallel across Go versions (2-3 minutes)
  unit-tests:
    name: Unit Tests (Go ${{ matrix.go-version }})
    runs-on: ubuntu-latest
    needs: quick-validation
    if: needs.quick-validation.outputs.docs-only != 'true'
    timeout-minutes: 4
    
    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.21', '1.22', '1.23']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Cache test dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            /tmp/go-cache
          key: test-deps-${{ runner.os }}-go${{ matrix.go-version }}-${{ needs.quick-validation.outputs.go-mod-hash }}
          restore-keys: |
            test-deps-${{ runner.os }}-go${{ matrix.go-version }}-

      - name: Run unit tests
        run: |
          # Parallel test execution with optimizations
          go test -race -parallel=4 -cpu=2 -timeout=3m \
            -coverprofile=coverage-${{ matrix.go-version }}.out \
            -covermode=atomic \
            -json ./... > test-results-${{ matrix.go-version }}.json
          
          # Generate coverage report
          go tool cover -func=coverage-${{ matrix.go-version }}.out | tee coverage-summary-${{ matrix.go-version }}.txt
          
          # Extract coverage percentage
          COVERAGE=$(go tool cover -func=coverage-${{ matrix.go-version }}.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Coverage: ${COVERAGE}%"
          
          # Validate coverage threshold
          if (( $(echo "$COVERAGE < 60" | bc -l) )); then
            echo "❌ Coverage ${COVERAGE}% is below minimum threshold of 60%"
            exit 1
          fi

      - name: Upload coverage reports
        if: matrix.go-version == '1.23'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage-${{ matrix.go-version }}.out
          flags: unittests
          name: unit-tests-go${{ matrix.go-version }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-go${{ matrix.go-version }}
          path: |
            test-results-${{ matrix.go-version }}.json
            coverage-${{ matrix.go-version }}.out
            coverage-summary-${{ matrix.go-version }}.txt
          retention-days: 3

  # Job 4: Linting and code quality - parallel execution (1-2 minutes)
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    needs: quick-validation
    if: needs.quick-validation.outputs.docs-only != 'true'
    timeout-minutes: 3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache linting dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/.cache/golangci-lint
          key: lint-deps-${{ runner.os }}-${{ env.GOLANGCI_LINT_VERSION }}-${{ needs.quick-validation.outputs.go-mod-hash }}
          restore-keys: |
            lint-deps-${{ runner.os }}-${{ env.GOLANGCI_LINT_VERSION }}-

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: --timeout=2m --issues-exit-code=1
          skip-cache: false
          skip-pkg-cache: false
          skip-build-cache: false

      - name: Check Go formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "❌ Go code is not properly formatted:"
            gofmt -s -l .
            echo "Run 'gofmt -s -w .' to fix formatting issues"
            exit 1
          fi
          echo "✅ Go code is properly formatted"

      - name: Check Go modules
        run: |
          go mod tidy
          if ! git diff --quiet go.mod go.sum; then
            echo "❌ Go modules are not tidy:"
            git diff go.mod go.sum
            echo "Run 'go mod tidy' to fix module issues"
            exit 1
          fi
          echo "✅ Go modules are tidy"

  # Job 5: Security scanning - parallel execution (2-3 minutes)
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: quick-validation
    if: needs.quick-validation.outputs.docs-only != 'true' && (github.event_name != 'workflow_dispatch' || inputs.run_security)
    timeout-minutes: 4
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache security tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/bin
          key: security-tools-${{ runner.os }}-v2
          restore-keys: |
            security-tools-${{ runner.os }}-

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck -json ./... > govulncheck-report.json || true
          
          if grep -q '"vulnerability"' govulncheck-report.json; then
            echo "❌ Vulnerabilities found!"
            govulncheck ./...
            exit 1
          else
            echo "✅ No known vulnerabilities detected"
          fi

      - name: Run gosec
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec-report.sarif -stdout -severity medium ./...'

      - name: Upload security reports
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec-report.sarif
          category: gosec

      - name: Upload security artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            govulncheck-report.json
            gosec-report.sarif
          retention-days: 7

  # Job 6: Integration tests - conditional execution (3-4 minutes)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quick-validation, build-matrix]
    if: needs.quick-validation.outputs.docs-only != 'true' && (github.event_name != 'workflow_dispatch' || !inputs.skip_tests)
    timeout-minutes: 5
    
    services:
      docker:
        image: docker:24-dind
        options: --privileged
        ports:
          - 2376:2376

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: binary-linux-amd64
          path: bin/

      - name: Setup test environment
        run: |
          chmod +x bin/docker-net-doctor-linux-amd64
          
          # Configure Testcontainers for CI
          echo "TESTCONTAINERS_RYUK_DISABLED=true" >> $GITHUB_ENV
          echo "TESTCONTAINERS_HOST_OVERRIDE=localhost" >> $GITHUB_ENV
          
          # Wait for Docker to be ready
          timeout 30 sh -c 'until docker info; do sleep 1; done'
          
          # Pre-pull test images
          docker pull nginx:1.25-alpine &
          docker pull redis:7.2-alpine &
          docker pull alpine:3.19 &
          wait

      - name: Run integration tests
        run: |
          # Run integration tests with timeout and parallel execution
          go test -v -timeout=4m -parallel=2 -tags=integration \
            ./test/integration/... \
            -coverprofile=integration-coverage.out || true
          
          # Test the built binary
          ./bin/docker-net-doctor-linux-amd64 --help
          ./bin/docker-net-doctor-linux-amd64 diagnose --json > diagnose-results.json
          
          # Validate output
          if [ -s diagnose-results.json ]; then
            echo "✅ Binary execution successful"
            jq '.Summary.TotalChecks' diagnose-results.json
          else
            echo "❌ Binary execution failed"
            exit 1
          fi

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            integration-coverage.out
            diagnose-results.json
          retention-days: 3

  # Job 7: Docker image build and test - parallel with other jobs (2-3 minutes)
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [quick-validation, build-matrix]
    if: needs.quick-validation.outputs.docs-only != 'true'
    timeout-minutes: 4
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: binary-linux-amd64
          path: bin/

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: docker-net-doctor:test
          cache-from: type=gha,scope=docker-build
          cache-to: type=gha,mode=max,scope=docker-build
          outputs: type=docker,dest=/tmp/docker-net-doctor.tar

      - name: Test Docker image
        run: |
          docker load < /tmp/docker-net-doctor.tar
          docker run --rm docker-net-doctor:test --help
          echo "✅ Docker image test passed"

      - name: Upload Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/docker-net-doctor.tar
          retention-days: 1

  # Job 8: Cross-platform testing - matrix execution (2-3 minutes per platform)
  cross-platform-tests:
    name: Cross-Platform Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: quick-validation
    if: needs.quick-validation.outputs.docs-only != 'true' && github.event_name == 'push'
    timeout-minutes: 4
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run platform-specific tests
        run: |
          # Run tests without Docker dependencies on all platforms
          go test -v -short -timeout=3m ./internal/... ./pkg/... || true
          echo "✅ Platform tests completed"

  # Job 9: Performance benchmarks - conditional execution (2-3 minutes)
  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [quick-validation, build-matrix]
    if: needs.quick-validation.outputs.docs-only != 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 4
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run benchmarks
        run: |
          # Run performance benchmarks
          go test -v -bench=. -benchmem -timeout=3m \
            ./internal/diagnostics/... > benchmark-results.txt 2>&1 || true
          
          echo "📊 Benchmark Results:"
          cat benchmark-results.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results.txt
          retention-days: 7

  # Job 10: Pipeline status and reporting - runs after all main jobs
  pipeline-status:
    name: Pipeline Status & Reporting
    runs-on: ubuntu-latest
    needs: [quick-validation, build-matrix, unit-tests, code-quality, security-scan, integration-tests, docker-build, cross-platform-tests, performance-benchmarks]
    if: always()
    timeout-minutes: 2
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Collect job statuses
        id: status
        run: |
          echo "quick-validation: ${{ needs.quick-validation.result }}"
          echo "build-matrix: ${{ needs.build-matrix.result }}"
          echo "unit-tests: ${{ needs.unit-tests.result }}"
          echo "code-quality: ${{ needs.code-quality.result }}"
          echo "security-scan: ${{ needs.security-scan.result }}"
          echo "integration-tests: ${{ needs.integration-tests.result }}"
          echo "docker-build: ${{ needs.docker-build.result }}"
          echo "cross-platform-tests: ${{ needs.cross-platform-tests.result }}"
          echo "performance-benchmarks: ${{ needs.performance-benchmarks.result }}"
          
          # Calculate overall status
          if [[ "${{ needs.quick-validation.result }}" == "failure" || 
                "${{ needs.build-matrix.result }}" == "failure" || 
                "${{ needs.unit-tests.result }}" == "failure" || 
                "${{ needs.code-quality.result }}" == "failure" ]]; then
            echo "overall-status=failure" >> $GITHUB_OUTPUT
            echo "❌ Critical jobs failed"
          elif [[ "${{ needs.security-scan.result }}" == "failure" || 
                  "${{ needs.integration-tests.result }}" == "failure" ]]; then
            echo "overall-status=warning" >> $GITHUB_OUTPUT
            echo "⚠️ Some jobs failed"
          else
            echo "overall-status=success" >> $GITHUB_OUTPUT
            echo "✅ All jobs completed successfully"
          fi

      - name: Calculate pipeline duration
        run: |
          START_TIME="${{ github.event.head_commit.timestamp }}"
          END_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Simple duration calculation (in CI, we approximate based on workflow run)
          echo "Pipeline started at: $START_TIME"
          echo "Pipeline ended at: $END_TIME"
          echo "🎯 Target execution time: <10 minutes"

      - name: Comment on PR with status
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ steps.status.outputs.overall-status }}';
            const icon = status === 'success' ? '✅' : status === 'warning' ? '⚠️' : '❌';
            
            const body = `${icon} **CI/CD Pipeline Status: ${status.toUpperCase()}**
            
            **Job Results:**
            - Quick Validation: ${{ needs.quick-validation.result }}
            - Build Matrix: ${{ needs.build-matrix.result }}
            - Unit Tests: ${{ needs.unit-tests.result }}
            - Code Quality: ${{ needs.code-quality.result }}
            - Security Scan: ${{ needs.security-scan.result }}
            - Integration Tests: ${{ needs.integration-tests.result }}
            - Docker Build: ${{ needs.docker-build.result }}
            - Cross-Platform Tests: ${{ needs.cross-platform-tests.result }}
            - Performance Benchmarks: ${{ needs.performance-benchmarks.result }}
            
            🎯 **Pipeline Optimizations Applied:**
            - Parallel job execution with smart dependencies
            - Aggressive caching for Go modules and builds
            - Early validation and failure detection
            - Conditional job execution based on changes
            - Matrix builds for cross-platform testing
            
            📊 **Performance Target:** <10 minute total execution time
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Job 11: Cleanup - runs always to clean up artifacts
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [pipeline-status]
    if: always()
    timeout-minutes: 1
    
    steps:
      - name: Clean up short-term artifacts
        uses: actions/github-script@v7
        with:
          script: |
            // Clean up artifacts older than 1 day for PRs
            if (context.eventName === 'pull_request') {
              console.log('Cleaning up PR artifacts...');
              // Note: Actual cleanup would require additional permissions
            }